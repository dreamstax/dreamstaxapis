syntax = "proto3";

package kai.piper.v1alpha1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";

option go_package = "piper/v1alpha1;piper";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Kai piper service";
		version: "v1alpha1";
		contact: {
			name: "Kai API team";
			url: "kai-docs.dreamstax.io";
			email: "dev@dreamstax.io";
		};
	};
	external_docs: {
		url: "https://github.com/dreamstax/kai-piper";
		description: "Github Repo";
	}
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
    // Generic responses
    responses: {
        key: "400"
        value: {
            description: "Bad Request"
            examples: {
                key: "application/json"
                value: "{\"code\": 3,\"message\": \"Bad Request\",\"details\": [{\"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\"reason\": \"FliteError: Bad request\",\"domain\": \"\",\"metadata\": {}}]}"
            }
        }
    }
    responses: {
        key: "500"
        value: {
            description: "Unknown Error"
            examples: {
                key: "application/json"
                value: "{\"code\": 2,\"message\": \"Something bad happened\",\"details\": [{\"@type\": \"type.googleapis.com/google.rpc.ErrorInfo\",\"reason\": \"FliteError: Something bad happened\",\"domain\": \"\",\"metadata\": {}}]}"
            }
        }
    }
};

service Piper {
    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
        option (google.api.http) = {
            get: "/health"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            produces: "application/json"
            consumes: "application/json"

            tags: "Health"
		};
    }

    rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse) {
        option (google.api.http) = {
            get: "/v1alpha1/pipelines"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            produces: "application/json"
            consumes: "application/json"

            tags: "pipelines"
		};
    }

    rpc GetPipeline(GetPipelineRequest) returns (Pipeline) {
        option (google.api.http) = {
            get: "/v1alpha1/pipelines/{pipeline_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            produces: "application/json"
            consumes: "application/json"

            tags: "pipelines"
		};
    }

    rpc CreatePipeline(CreatePipelineRequest) returns (Pipeline) {
        option (google.api.http) = {
            post: "/v1alpha1/pipelines"
            body: "pipeline"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            produces: "application/json"
            consumes: "application/json"

            tags: "pipelines"
		};
    }

    rpc UpdatePipeline(UpdatePipelineRequest) returns (Pipeline) {
        option (google.api.http) = {
            patch: "/v1alpha1/pipelines/{pipeline_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            produces: "application/json"
            consumes: "application/json"

            tags: "pipelines"
		};
    }

    rpc DeletePipeline(DeletePipelineRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1alpha1/pipelines/{pipeline_id}"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            produces: "application/json"
            consumes: "application/json"

            tags: "pipelines"
		};
    }
}

message HealthCheckRequest {}

message HealthCheckResponse {
    string status = 1;
}

message ListPipelinesRequest {}

message ListPipelinesResponse {
    repeated Pipeline pipelines = 1;
}

message GetPipelineRequest {
    string pipeline_id = 1;
}

message CreatePipelineRequest {
    Pipeline pipeline = 2;
}

message UpdatePipelineRequest {
    Pipeline pipeline = 1;

    string pipeline_id = 2;

    google.protobuf.FieldMask field_mask = 3;
}

message DeletePipelineRequest {
    string pipeline_id = 1;
}

message Pipeline {
    string name = 1;

    string display_name = 2;

    string description = 3;
}

enum StepType {
    STEP_UNKNOWN = 0;
    STEP_HTTP = 1;
}

message Step {
    string name = 1;

    string display_name = 2;

    string description = 3;

    StepType type = 4;

    string http_method = 5;

    string host = 6;

    string port = 7;

    string path = 8;
}
